//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServiceReference.IWcfService")]
    public interface IWcfService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetData", ReplyAction="http://tempuri.org/IWcfService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetData", ReplyAction="http://tempuri.org/IWcfService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetAllTables", ReplyAction="http://tempuri.org/IWcfService/GetAllTablesResponse")]
        string[] GetAllTables(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetAllTables", ReplyAction="http://tempuri.org/IWcfService/GetAllTablesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllTablesAsync(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetTableData", ReplyAction="http://tempuri.org/IWcfService/GetTableDataResponse")]
        string GetTableData(string connectionString, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetTableData", ReplyAction="http://tempuri.org/IWcfService/GetTableDataResponse")]
        System.Threading.Tasks.Task<string> GetTableDataAsync(string connectionString, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetTableDataWithQuery", ReplyAction="http://tempuri.org/IWcfService/GetTableDataWithQueryResponse")]
        string GetTableDataWithQuery(string connectionString, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetTableDataWithQuery", ReplyAction="http://tempuri.org/IWcfService/GetTableDataWithQueryResponse")]
        System.Threading.Tasks.Task<string> GetTableDataWithQueryAsync(string connectionString, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/UpdateTableData", ReplyAction="http://tempuri.org/IWcfService/UpdateTableDataResponse")]
        void UpdateTableData(string connectionString, string tableName, string tableData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/UpdateTableData", ReplyAction="http://tempuri.org/IWcfService/UpdateTableDataResponse")]
        System.Threading.Tasks.Task UpdateTableDataAsync(string connectionString, string tableName, string tableData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/InsertTableData", ReplyAction="http://tempuri.org/IWcfService/InsertTableDataResponse")]
        void InsertTableData(string connectionString, string tableName, string tableData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/InsertTableData", ReplyAction="http://tempuri.org/IWcfService/InsertTableDataResponse")]
        System.Threading.Tasks.Task InsertTableDataAsync(string connectionString, string tableName, string tableData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/InsertRow", ReplyAction="http://tempuri.org/IWcfService/InsertRowResponse")]
        void InsertRow(string connectionString, string tableName, string[] row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/InsertRow", ReplyAction="http://tempuri.org/IWcfService/InsertRowResponse")]
        System.Threading.Tasks.Task InsertRowAsync(string connectionString, string tableName, string[] row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/DeleteRow", ReplyAction="http://tempuri.org/IWcfService/DeleteRowResponse")]
        void DeleteRow(string connectionString, string tableName, string column, string rowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/DeleteRow", ReplyAction="http://tempuri.org/IWcfService/DeleteRowResponse")]
        System.Threading.Tasks.Task DeleteRowAsync(string connectionString, string tableName, string column, string rowId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IWcfServiceChannel : WcfServiceReference.IWcfService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class WcfServiceClient : System.ServiceModel.ClientBase<WcfServiceReference.IWcfService>, WcfServiceReference.IWcfService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WcfServiceClient() : 
                base(WcfServiceClient.GetDefaultBinding(), WcfServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWcfService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(WcfServiceClient.GetBindingForEndpoint(endpointConfiguration), WcfServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WcfServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WcfServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetData(int value)
        {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value)
        {
            return base.Channel.GetDataAsync(value);
        }
        
        public string[] GetAllTables(string connectionString)
        {
            return base.Channel.GetAllTables(connectionString);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllTablesAsync(string connectionString)
        {
            return base.Channel.GetAllTablesAsync(connectionString);
        }
        
        public string GetTableData(string connectionString, string tableName)
        {
            return base.Channel.GetTableData(connectionString, tableName);
        }
        
        public System.Threading.Tasks.Task<string> GetTableDataAsync(string connectionString, string tableName)
        {
            return base.Channel.GetTableDataAsync(connectionString, tableName);
        }
        
        public string GetTableDataWithQuery(string connectionString, string query)
        {
            return base.Channel.GetTableDataWithQuery(connectionString, query);
        }
        
        public System.Threading.Tasks.Task<string> GetTableDataWithQueryAsync(string connectionString, string query)
        {
            return base.Channel.GetTableDataWithQueryAsync(connectionString, query);
        }
        
        public void UpdateTableData(string connectionString, string tableName, string tableData)
        {
            base.Channel.UpdateTableData(connectionString, tableName, tableData);
        }
        
        public System.Threading.Tasks.Task UpdateTableDataAsync(string connectionString, string tableName, string tableData)
        {
            return base.Channel.UpdateTableDataAsync(connectionString, tableName, tableData);
        }
        
        public void InsertTableData(string connectionString, string tableName, string tableData)
        {
            base.Channel.InsertTableData(connectionString, tableName, tableData);
        }
        
        public System.Threading.Tasks.Task InsertTableDataAsync(string connectionString, string tableName, string tableData)
        {
            return base.Channel.InsertTableDataAsync(connectionString, tableName, tableData);
        }
        
        public void InsertRow(string connectionString, string tableName, string[] row)
        {
            base.Channel.InsertRow(connectionString, tableName, row);
        }
        
        public System.Threading.Tasks.Task InsertRowAsync(string connectionString, string tableName, string[] row)
        {
            return base.Channel.InsertRowAsync(connectionString, tableName, row);
        }
        
        public void DeleteRow(string connectionString, string tableName, string column, string rowId)
        {
            base.Channel.DeleteRow(connectionString, tableName, column, rowId);
        }
        
        public System.Threading.Tasks.Task DeleteRowAsync(string connectionString, string tableName, string column, string rowId)
        {
            return base.Channel.DeleteRowAsync(connectionString, tableName, column, rowId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWcfService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWcfService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:65106/WcfService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WcfServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWcfService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WcfServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWcfService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWcfService,
        }
    }
}
